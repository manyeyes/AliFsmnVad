name: Build, Pack and Publish to NuGet

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux 架构
          - os: ubuntu-latest
            target-frameworks: 'net9.0'
            runtime: 'linux-x64'
          - os: ubuntu-latest
            target-frameworks: 'net9.0'
            runtime: 'linux-arm64'
          
          # macOS 架构（Intel和Apple Silicon）
          - os: macos-latest
            target-frameworks: 'net9.0-maccatalyst'  # 包含macOS特定框架
            runtime: 'osx-x64'  # Intel芯片macOS
          - os: macos-latest
            target-frameworks: 'net9.0-maccatalyst'
            runtime: 'osx-arm64'  # Apple Silicon芯片macOS
          
          # iOS 10.14 x64架构
          - os: macos-latest
            target-frameworks: 'net9.0-ios'  # iOS特定框架
            runtime: 'ios-x64'  # iOS x64（模拟器或64位设备）
            ios-version: '10.14'  # 指定iOS版本

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET SDKs
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x
          9.0.x

    # 安装iOS/macOS所需的.NET工作负载（仅macOS需要）
    - name: Install .NET iOS/macOS workloads
      if: matrix.os == 'macos-latest'
      run: |
        dotnet workload install ios
        dotnet workload install macos
        dotnet workload restore  # 确保项目依赖的工作负载已安装

    # 安装Linux ARM64交叉编译依赖
    - name: Install Linux ARM64 dependencies
      if: matrix.os == 'ubuntu-latest' && matrix.runtime == 'linux-arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    # 还原依赖（包含运行时和平台特定依赖）
    - name: Restore dependencies
      run: dotnet restore AliFsmnVad/AliFsmnVad.csproj 
        -p:TargetFrameworks='${{ matrix.target-frameworks }}'
        -p:RuntimeIdentifier=${{ matrix.runtime }}
        ${{ matrix.ios-version != '' && format('-p:IOSVersion={0}', matrix.ios-version) || '' }} # 传递iOS版本（如果指定）

    # # 构建指定架构和平台的版本
    # - name: Build (${{ matrix.runtime }})
    #   run: dotnet build AliFsmnVad/AliFsmnVad.csproj 
    #     --configuration Release 
    #     --no-restore 
    #     -p:TargetFrameworks='${{ matrix.target-frameworks }}' 
    #     -p:RuntimeIdentifier=${{ matrix.runtime }} 
    #     -p:SelfContained=false 
    #     ${{ matrix.ios-version != '' && format('-p:IOSVersion={0}', matrix.ios-version) || '' }}
    #     ${{ matrix.runtime == 'ios-x64' && '-p:EnableAssemblyILStripping=false' || '' }}  # iOS优化：禁用IL剥离（可选）

    # - name: Build
    #   run: dotnet build AliFsmnVad.sln 
    #     --configuration Release 
    #     --no-restore 
    #     -p:TargetFrameworks='${{ matrix.target-frameworks }}' 
    #     -p:RuntimeIdentifier=${{ matrix.runtime }} 
    #     -p:SelfContained=false 
    #     -p:ExcludeFromBuild=true 
    #     -p:ExcludedProjects="AliFsmnVad.Examples.csproj"
    #     ${{ matrix.ios-version != '' && format('-p:IOSVersion={0}', matrix.ios-version) || '' }}
    #     ${{ matrix.runtime == 'ios-x64' && '-p:EnableAssemblyILStripping=false' || '' }}  # iOS优化：禁用IL剥离（可选）

    - name: Build
      run: dotnet build AliFsmnVad/AliFsmnVad.csproj
        --configuration Release 
        --no-restore 
        -p:TargetFrameworks='${{ matrix.target-frameworks }}' 
        -p:RuntimeIdentifier=${{ matrix.runtime }} 
        -p:SelfContained=false
        ${{ matrix.ios-version != '' && format('-p:IOSVersion={0}', matrix.ios-version) || '' }}
        ${{ matrix.runtime == 'ios-x64' && '-p:EnableAssemblyILStripping=false' || '' }}  # iOS优化：禁用IL剥离（可选）

    # 按平台和架构打包（输出到不同目录避免冲突）
    # 修复后的 Pack 步骤
    - name: Pack (${{ matrix.runtime }})
      run: dotnet pack AliFsmnVad/AliFsmnVad.csproj 
        --configuration Release 
        --no-build 
        --output ./nupkg/AliFsmnVad/${{ matrix.runtime }} 
        -p:TargetFrameworks='${{ matrix.target-frameworks }}' 
        -p:RuntimeIdentifier=${{ matrix.runtime }} 
        -p:IncludeRuntimeDependencies=true 
        -p:IncludeNativeLibrariesForSelfExtract=true 
        ${{ matrix.ios-version != '' && format('-p:IOSVersion={0}', matrix.ios-version) || '' }}

    # 上传按架构区分的产物
    - name: Upload NuGet packages (${{ matrix.runtime }})
      uses: actions/upload-artifact@v4
      with:
        name: manyspeech-nupkg-${{ matrix.os }}-${{ matrix.runtime }}
        path: ./nupkg/AliFsmnVad/${{ matrix.runtime }}/*.nupkg
        retention-days: 30

    # 发布到NuGet（标签推送时触发）
    - name: Publish to NuGet
      if: startsWith(github.ref, 'refs/tags/v')
      run: dotnet nuget push ./nupkg/AliFsmnVad/${{ matrix.runtime }}/*.nupkg 
        --api-key ${{ secrets.NUGET_API_KEY }} 
        --source https://api.nuget.org/v3/index.json 
        --skip-duplicate

    - name: Cleanup on failure
      if: failure()
      run: |
        git tag -d ${{ steps.version.outputs.new_version }} || true
        git push origin :refs/tags/${{ steps.version.outputs.new_version }} || true

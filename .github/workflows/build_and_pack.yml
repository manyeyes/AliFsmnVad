name: CI Pipeline

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    name: Build (${{ matrix.os }} - ${{ matrix.tfm }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux 构建
          - os: ubuntu-22.04
            tfm: netstandard2.0
            dotnet: 6.0.x
          - os: ubuntu-22.04
            tfm: netstandard2.1
            dotnet: 7.0.x
          - os: ubuntu-22.04
            tfm: net6.0
            dotnet: 6.0.x
          - os: ubuntu-22.04
            tfm: net7.0
            dotnet: 7.0.x
          - os: ubuntu-22.04
            tfm: net8.0
            dotnet: 8.0.x
          - os: ubuntu-22.04
            tfm: net9.0
            dotnet: 9.0.x

          # Windows 构建
          - os: windows-2022
            tfm: netcoreapp3.1
            dotnet: 3.1.x
          - os: windows-2022
            tfm: net8.0-windows10.0.19041.0
            dotnet: 8.0.x

          # macOS 构建
          - os: macos-13
            tfm: net8.0-android
            dotnet: 8.0.x
            workload: android
          - os: macos-13
            tfm: net9.0-ios
            dotnet: 9.0.x
            workload: ios
          - os: macos-13
            tfm: net9.0-maccatalyst
            dotnet: 9.0.x
            workload: maccatalyst
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.2
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.0.0
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Install workloads
        if: matrix.workload
        run: |
          echo "Installing ${{ matrix.workload }} workload..."
          dotnet workload install ${{ matrix.workload }} --skip-manifest-update
          if [[ "${{ matrix.workload }}" =~ (ios|maccatalyst) ]]; then
            dotnet workload install wasm-tools --skip-manifest-update
          fi

      - name: Clean project
        run: dotnet clean AliFsmnVad/AliFsmnVad.csproj -c Release

      - name: Restore dependencies
        run: |
          # 强制清除NuGet缓存
          dotnet nuget locals all --clear
          dotnet restore AliFsmnVad/AliFsmnVad.csproj -p:TargetFramework=${{ matrix.tfm }}

      - name: Build project
        run: dotnet build AliFsmnVad/AliFsmnVad.csproj -c Release -p:TargetFramework=${{ matrix.tfm }} --no-restore

      - name: Create package directory
        run: mkdir -p artifacts/packages

      - name: Pack project
        run: dotnet pack AliFsmnVad/AliFsmnVad.csproj -c Release -o artifacts/packages -p:TargetFramework=${{ matrix.tfm }} --no-build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.3.1
        with:
          name: packages-${{ matrix.os }}-${{ matrix.tfm }}
          path: artifacts/packages/*.nupkg
          retention-days: 3

  publish:
    name: Publish to NuGet
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/packages
          pattern: 'packages-*/*'
          merge-multiple: true

      - name: Publish packages
        run: |
          for pkg in artifacts/packages/*.nupkg; do
            dotnet nuget push "$pkg" \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done

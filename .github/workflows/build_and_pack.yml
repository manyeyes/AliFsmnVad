name: CI

on:
  push:
    branches: [master, release-*]
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-*'
  pull_request:
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    name: Build / ${{ matrix.os }} / ${{ matrix.tfm }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14]
        tfm: ['netstandard2.0', 'netstandard2.1', 'net6.0', 'net7.0', 'net8.0', 'net9.0']
        include:
          - os: windows-2022
            tfm: 'netcoreapp3.1'
            dotnet_version: '3.1.x'
          - os: windows-2022
            tfm: 'net8.0-windows10.0.19041.0'
            dotnet_version: '8.0.x'
          - os: macos-14
            tfm: 'net8.0-android'
            dotnet_version: '8.0.x'
            install_workload: 'android'
          - os: macos-14
            tfm: 'net9.0-ios'
            dotnet_version: '9.0.x'
            install_workload: 'ios'
          - os: macos-14
            tfm: 'net9.0-maccatalyst'
            dotnet_version: '9.0.x'
            install_workload: 'maccatalyst'
        exclude:
          - os: ubuntu-22.04
            tfm: 'netcoreapp3.1'
          - os: windows-2022
            tfm: 'net9.0-ios'
          - os: windows-2022
            tfm: 'net9.0-maccatalyst'
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.0.0
        with:
          dotnet-version: ${{ matrix.dotnet_version || '9.0.x' }}

      - name: Install required workloads
        if: matrix.install_workload != ''
        run: |
          # 安装指定工作负载
          echo "Installing workload: ${{ matrix.install_workload }}"
          dotnet workload install ${{ matrix.install_workload }}
          
          # 对于iOS/MacCatalyst还需要额外组件
          if [[ "${{ matrix.install_workload }}" == "ios" || "${{ matrix.install_workload }}" == "maccatalyst" ]]; then
            dotnet workload install wasm-tools
          fi

      - name: Clean obj folder
        run: rm -rf AliFsmnVad/obj

      - name: Restore dependencies
        run: dotnet restore AliFsmnVad/AliFsmnVad.csproj -p:TargetFramework=${{ matrix.tfm }}

      - name: Build
        run: dotnet build AliFsmnVad/AliFsmnVad.csproj --configuration Release --no-restore -p:TargetFramework=${{ matrix.tfm }}

      - name: Pack
        run: |
          mkdir -p artifacts/package
          dotnet pack AliFsmnVad/AliFsmnVad.csproj --configuration Release --no-build -o artifacts/package -p:TargetFramework=${{ matrix.tfm }}

      - name: Upload packages
        uses: actions/upload-artifact@v4.3.1
        with:
          name: NuGet-packages-${{ matrix.os }}-${{ matrix.tfm }}
          path: artifacts/package/*.nupkg
          retention-days: 7

  test:
    name: Test / ${{ matrix.os }} / ${{ matrix.arch }} / ${{ matrix.tfm }}
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        arch: [x64]
        os: [windows-2022, macos-14, ubuntu-22.04]
        tfm: ['net6.0', 'net7.0', 'net8.0', 'net9.0']
        include:
          - arch: arm64
            os: macos-14
            tfm: 'net8.0'
          - arch: arm64
            os: macos-14
            tfm: 'net9.0'
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.0.0
        with:
          dotnet-version: |
            9.0.x
            8.0.x
            7.0.x
            6.0.x

      - name: Run tests
        run: dotnet test AliFsmnVad.Tests/AliFsmnVad.Tests.csproj --configuration Release --framework ${{ matrix.tfm }} --logger "GitHubActions"

  publish:
    name: Publish to NuGet
    runs-on: ubuntu-22.04
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./merged-packages
          pattern: 'NuGet-packages-*/*'
          merge-multiple: true

      - name: Publish to NuGet
        run: |
          dotnet nuget push ./merged-packages/*.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
